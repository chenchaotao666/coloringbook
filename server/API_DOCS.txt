Coloring Book API 接口文档
===============================

基础信息
--------
Base URL: http://localhost:3001
API 版本: v1.0.0
数据格式: JSON
字符编码: UTF-8

认证方式
--------
目前API暂未启用认证，后续将支持JWT Token认证。

通用响应格式
------------

成功响应:
{
  "status": "success",
  "data": {},
  "message": "操作成功",
  "pagination": {
    "currentPage": 1,
    "pageSize": 20,
    "total": 100,
    "totalPages": 5,
    "hasMore": true
  }
}

错误响应:
{
  "status": "fail",
  "errorCode": "错误类型",
  "message": "详细错误信息"
}

健康检查
--------

GET /health
检查服务器运行状态

请求示例:
GET /health

响应示例:
{
  "status": "success",
  "timestamp": "2024-01-10T10:30:00.000Z",
  "message": "API服务器运行正常",
  "version": "1.0.0"
}

===============================
用户管理 API
===============================

1. 用户注册
-----------
接口地址: POST /api/users/register
接口描述: 用户注册新账号

请求体参数:
参数      类型    必填  说明      限制
username  string  是    用户名    3-30字符，唯一
email     string  是    邮箱地址  有效邮箱格式，唯一
password  string  是    密码      6-50字符，包含字母数字

请求示例:
POST /api/users/register
Content-Type: application/json

{
  "username": "hongyu",
  "email": "hongyu@example.com",
  "password": "password123"
}

成功响应示例:
{
  "status": "success",
  "data": {
    "id": "user_1234567890",
    "username": "hongyu",
    "email": "hongyu@example.com",
    "avatar": null,
    "credits": 100,
    "userType": "free",
    "membershipExpiry": null,
    "createdAt": "2024-01-10T10:30:00.000Z"
  },
  "message": "注册成功"
}

错误响应示例:
// 邮箱已被注册
{
  "status": "fail",
  "errorCode": "1006",
  "message": "该邮箱已被注册"
}

// 用户名已存在
{
  "status": "fail",
  "errorCode": "1005",
  "message": "该用户名已被使用"
}

// 邮箱格式错误
{
  "status": "fail",
  "errorCode": "1003",
  "message": "邮箱格式不正确"
}

// 密码格式错误
{
  "status": "fail",
  "errorCode": "1004",
  "message": "密码必须包含字母和数字，长度6-50字符"
}

// 参数验证失败
{
  "status": "fail",
  "errorCode": "1001",
  "message": "用户名至少3个字符，密码至少6个字符"
}

2. 用户登录
-----------
接口地址: POST /api/users/login
接口描述: 用户登录获取访问令牌

请求体参数:
参数      类型    必填  说明      限制
email     string  是    邮箱地址  有效邮箱格式
password  string  是    密码      6-50字符

响应字段说明:
字段              类型    说明
id                string  用户唯一标识
username          string  用户名
email             string  邮箱地址
avatar            string  头像URL，可为null
credits          number  用户积分余额
userType          string  用户类型：free(免费用户)/lite(轻量版)/pro(专业版)
membershipExpiry  string  会员到期时间，免费用户为null
createdAt         string  账户创建时间

请求示例:
POST /api/users/login
Content-Type: application/json

{
  "email": "hongyu@example.com",
  "password": "password123"
}

成功响应示例:
{
  "status": "success",
  "data": {
    "user": {
      "id": "user_1234567890",
      "username": "hongyu",
      "email": "hongyu@example.com",
      "avatar": "/images/avatar/user_1234567890.png",
      "credits": 1500,
      "userType": "pro",
      "membershipExpiry": "2024-12-31T23:59:59.000Z",
      "createdAt": "2024-01-10T10:30:00.000Z"
    },
    "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzQ5NTcwODk3LCJleHAiOjE3NDk1NzE3OTd9.37ovCtg1VoJ84C3wqh9DBGfJpd1NZ2TPdXcCXUiahs4",
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNzQ5NTcwODk3LCJleHAiOjE3NTAxNzU2OTd9.cKj7P0dQZu81xUOxbdHhF9H2PvCbJvk4-351FdDnuTk",
    "expiresIn": "15m"
  },
  "message": "登录成功"
}

错误响应示例:
// 用户不存在
{
  "status": "fail",
  "errorCode": "1007",
  "message": "该邮箱未注册"
}

// 密码错误
{
  "status": "fail",
  "errorCode": "1008",
  "message": "密码错误"
}

// 账户被禁用
{
  "status": "fail",
  "errorCode": "1009",
  "message": "账户已被禁用，请联系客服"
}

// 邮箱格式错误
{
  "status": "fail",
  "errorCode": "1003",
  "message": "邮箱格式不正确"
}

// 参数验证失败
{
  "status": "fail",
  "errorCode": "1001",
  "message": "邮箱和密码不能为空"
}

3. 用户信息修改
---------------
接口地址: PUT /api/users/update
接口描述: 修改用户基本信息

请求体参数:
参数      类型    必填  说明    限制
username  string  否    用户名  3-30字符
password  string  否    新密码  6-50字符

请求示例:
PUT /api/users/update
Content-Type: application/json
Authorization: Bearer <token>

{
  "username": "hongyu_new",
  "password": "newpassword123"
}

响应示例:
{
  "status": "success",
  "data": {
    "id": "user_1234567890",
    "username": "hongyu_new",
    "email": "hongyu@example.com",
    "avatar": "/images/avatar/user_1234567890.png",
    "credits": 1500,
    "userType": "pro",
    "membershipExpiry": "2024-12-31T23:59:59.000Z",
    "updatedAt": "2024-01-10T11:00:00.000Z"
  },
  "message": "用户信息更新成功"
}

4. 用户头像修改
---------------
接口地址: POST /api/users/avatar
接口描述: 上传并修改用户头像

请求体参数:
参数  类型  必填  说明      限制
file  file  是    头像文件  图片格式，最大5MB

请求示例:
POST /api/users/avatar
Content-Type: multipart/form-data
Authorization: Bearer <token>

file: [binary data]

响应示例:
{
  "status": "success",
  "data": {
    "avatar": "/images/avatar/user_1234567890_new.png",
    "updatedAt": "2024-01-10T11:30:00.000Z"
  },
  "message": "头像更新成功"
}

5. 用户充值
-----------
接口地址: POST /api/users/recharge
接口描述: 用户账户充值

请求体参数:
参数      类型    必填  说明      限制
type      string  是    充值类型  monthly/yearly/credits
level     string  是    会员等级  lite/pro
credits  string  否    积分数量  当前不需要
payType   string  是    支付方式  master/visa/americanexpress/applepay/unionpay

请求示例:
POST /api/users/recharge
Content-Type: application/json
Authorization: Bearer <token>

{
  "type": "monthly",
  "level": "pro",
  "payType": "visa"
}

响应示例:
{
  "status": "success",
  "data": {
    "order": {
      "orderId": "order_1234567890",
      "amount": 29.99,
      "currency": "USD",
      "type": "monthly",
      "level": "pro",
      "payType": "visa",
      "status": "pending",
      "createdAt": "2024-01-10T12:00:00.000Z"
    },
    "user": {
      "id": "user_1234567890",
      "userType": "pro",
      "membershipExpiry": "2024-12-31T23:59:59.000Z",
      "credits": 1500
    }
  },
  "message": "充值订单创建成功"
}

===============================
图片管理 API
===============================

1. 图片查询
-----------
接口地址: GET /api/images
接口描述: 查询图片，支持多种筛选条件和分页

查询参数:
参数         类型     必填  说明                    默认值
imageId      string   否    图片ID（查询单张图片）  -
query        string   否    搜索关键词              -
category     string   否    分类筛选                -
tags         string   否    标签筛选（逗号分隔）    -
ratio        string   否    图片比例                -
type         string   否    图片类型                -
userId       string   否    用户ID筛选              -
isPublic     boolean  否    是否公开                -
currentPage  number   否    当前页码                1
pageSize     number   否    每页数量                20
isRelated    boolean  否    是否推荐相关图片        false

图片比例枚举:
1:1 - 正方形
3:4 - 竖版
4:3 - 横版

图片类型枚举:
text2image - 文本生成图片
image2image - 图片转换图片

请求示例:
# 查询单张图片
GET /api/images?imageId=cat

# 搜索图片
GET /api/images?query=cat&category=animals&currentPage=1&pageSize=10

# 获取相关推荐
GET /api/images?imageId=cat&isRelated=true

# 按标签筛选
GET /api/images?tags=cute,pet&ratio=1:1&isPublic=true

响应示例:
{
  "status": "success",
  "data": [
    {
      "id": "cat",
      "name": "cat",
      "defaultUrl": "/images-mock/cat-default.png",
      "colorUrl": "/images-mock/cat-color.png",
      "title": "小猫",
      "description": "可爱的小猫咪",
      "tags": ["Animal", "Cat", "Cute", "Pet"],
      "type": "text2image",
      "ratio": "1:1",
      "isPublic": true,
      "createdAt": "2024-01-15T11:15:00.000Z",
      "prompt": "可爱的小猫咪涂色页，圆润的线条设计，大眼睛和小鼻子",
      "userId": "system",
      "category": "id-animals",
      "size": "100,500",
      "additionalInfo": {
        "features": [
          "可爱的小猫造型，圆润的线条设计",
          "大眼睛和小鼻子，表情生动有趣",
          "简洁的轮廓，适合幼儿涂色",
          "毛茸茸的质感，易于表现不同纹理"
        ],
        "suitableFor": [
          "2-6岁幼儿：培养对动物的喜爱",
          "宠物爱好者：表达对猫咪的喜爱",
          "初学涂色者：简单易懂的图案",
          "安静活动：适合需要专注的时光"
        ],
        "coloringSuggestions": [
          "自然色彩：橙色、灰色、白色等真实猫咪颜色",
          "梦幻配色：粉色、紫色、蓝色等童话色彩",
          "条纹图案：添加虎斑或其他猫咪花纹",
          "背景装饰：可添加小鱼、毛线球等相关元素"
        ],
        "creativeUses": [
          "宠物主题装饰：适合爱猫人士的房间布置",
          "儿童教育：认识动物特征和习性",
          "情感表达：通过涂色表达对宠物的爱",
          "礼物制作：送给喜欢猫咪的朋友"
        ]
      }
    }
  ],
  "pagination": {
    "currentPage": 1,
    "pageSize": 10,
    "total": 156,
    "totalPages": 16,
    "hasMore": true
  }
}

2. 文本生成图片
---------------
接口地址: POST /api/images/text2imggenerate
接口描述: 根据文本描述生成涂色图片

请求体参数:
参数      类型     必填  说明      限制
prompt    string   是    文本描述  1-500字符
ratio     string   是    图片比例  1:1/3:4/4:3
isPublic  boolean  是    是否公开  true/false

请求示例:
POST /api/images/text2imggenerate
Content-Type: application/json
Authorization: Bearer <token>

{
  "prompt": "可爱的小猫咪涂色页，圆润的线条设计，大眼睛和小鼻子",
  "ratio": "1:1",
  "isPublic": true
}

响应示例:
{
  "status": "success",
  "data": {
    "id": "gen_1234567890",
    "name": "generated_cat",
    "defaultUrl": "/images/generated/gen_1234567890_default.png",
    "colorUrl": "/images/generated/gen_1234567890_color.png",
    "title": "AI生成小猫",
    "description": "基于文本描述生成的可爱小猫涂色页",
    "tags": ["AI生成", "小猫", "涂色"],
    "type": "text2image",
    "ratio": "1:1",
    "isPublic": true,
    "createdAt": "2024-01-15T12:00:00.000Z",
    "prompt": "可爱的小猫咪涂色页，圆润的线条设计，大眼睛和小鼻子",
    "userId": "user_1234567890",
    "category": "id-generated",
    "size": "512,512",
    "status": "completed"
  },
  "message": "图片生成成功"
}

3. 图片转换生成
---------------
接口地址: POST /api/images/img2imggenerate
接口描述: 将上传的图片转换为涂色图片

请求体参数:
参数      类型     必填  说明      限制
file      file     是    图片文件  图片格式，最大10MB
isPublic  boolean  是    是否公开  true/false

请求示例:
POST /api/images/img2imggenerate
Content-Type: multipart/form-data
Authorization: Bearer <token>

file: [binary data]
isPublic: true

响应示例:
{
  "status": "success",
  "data": {
    "id": "conv_1234567890",
    "name": "converted_image",
    "defaultUrl": "/images/converted/conv_1234567890_default.png",
    "colorUrl": "/images/converted/conv_1234567890_color.png",
    "title": "转换涂色图",
    "description": "基于上传图片转换的涂色页",
    "tags": ["图片转换", "涂色"],
    "type": "image2image",
    "ratio": "4:3",
    "isPublic": true,
    "createdAt": "2024-01-15T12:30:00.000Z",
    "prompt": null,
    "userId": "user_1234567890",
    "category": "id-converted",
    "size": "800,600",
    "status": "completed"
  },
  "message": "图片转换成功"
}

4. 删除图片
-----------
接口地址: DELETE /api/images/:id
接口描述: 删除指定的图片

路径参数:
参数  类型    必填  说明    限制
id    string  是    图片ID  有效的图片ID

请求示例:
DELETE /api/images/cat
Authorization: Bearer <token>

响应示例:
{
  "status": "success",
  "data": {
  },
  "message": "图片删除成功"
}

错误响应示例:
{
  "status": "fail",
  "errorCode": "图片不存在",
  "message": "指定的图片不存在或已被删除"
}

{
  "status": "fail",
  "errorCode": "权限不足",
  "message": "只能删除自己创建的图片"
}

5. 举报图片
-----------
接口地址: POST /api/images/report
接口描述: 举报不当图片内容

请求体参数:
参数      类型    必填  说明        限制
content   string  是    举报内容    1-500字符，描述举报原因
imageId   string  是    图片ID      有效的图片ID

举报类型说明:
- 不当内容：包含暴力、色情等不适宜内容
- 版权侵犯：侵犯他人版权或知识产权
- 垃圾信息：无意义或重复的内容
- 其他：其他不符合社区规范的内容

请求示例:
POST /api/images/report
Content-Type: application/json
Authorization: Bearer <token>

{
  "content": "该图片包含不当内容，不适合儿童观看",
  "imageId": "cat_123456"
}

成功响应示例:
{
  "status": "success",
  "data": {
    "reportId": "report_1234567890",
    "imageId": "cat_123456",
    "content": "该图片包含不当内容，不适合儿童观看",
    "status": "pending",
    "createdAt": "2024-01-15T14:30:00.000Z"
  },
  "message": "举报提交成功，我们会尽快处理"
}

错误响应示例:
{
  "status": "fail",
  "errorCode": "2001",
  "message": "指定的图片不存在"
}

{
  "status": "fail",
  "errorCode": "4001",
  "message": "举报内容不能为空"
}

{
  "status": "fail",
  "errorCode": "4002",
  "message": "您已经举报过该图片"
}

===============================
分类管理 API
===============================

1. 获取所有分类
---------------
接口地址: GET /api/categories
接口描述: 获取所有图片分类列表

请求参数: 无

请求示例:
GET /api/categories

响应示例:
{
  "status": "success",
  "data": [
    {
      "id": "id-animals",
      "name": "animals",
      "displayName": "Animals",
      "description": "Cute and wild animals coloring pages",
      "imageCount": 156,
      "thumbnailUrl": "/images-mock/cat-default.png"
    },
    {
      "id": "id-disney",
      "name": "disney",
      "displayName": "Disney",
      "description": "Disney characters and princesses",
      "imageCount": 89,
      "thumbnailUrl": "/images-mock/mario-default.png"
    },
    {
      "id": "id-flowers",
      "name": "flowers",
      "displayName": "Flowers",
      "description": "Beautiful flowers and plants",
      "imageCount": 124,
      "thumbnailUrl": "/images-mock/flower-default.png"
    },
    {
      "id": "id-vehicles",
      "name": "vehicles",
      "displayName": "Vehicles",
      "description": "Cars, trucks, planes and more",
      "imageCount": 78,
      "thumbnailUrl": "/images-mock/robot-default.png"
    },
    {
      "id": "id-fantasy",
      "name": "fantasy",
      "displayName": "Fantasy",
      "description": "Dragons, unicorns and magical creatures",
      "imageCount": 92,
      "thumbnailUrl": "/images-mock/cartoon-default.png"
    },
    {
      "id": "id-nature",
      "name": "nature",
      "displayName": "Nature",
      "description": "Trees, landscapes and natural scenes",
      "imageCount": 67,
      "thumbnailUrl": "/images-mock/flower1-default.png"
    }
  ],
  "total": 6
}

===============================
用户类型和积分系统
===============================

用户类型说明
------------
类型  名称      说明                          权限
free  免费用户  注册即可获得                  基础功能，每日限制生成次数
lite  轻量版    月费会员                      增加生成次数，部分高级功能
pro   专业版    月费/年费会员                 无限生成，全部高级功能

积分系统说明
------------
1. 新用户注册赠送40积分
4. 生成图片消耗积分：
   - 文本生成图片：20积分/次
   - 图片转换：25积分/次
5. 会员用户每月赠送积分：
   - lite用户：300积分/月
   - pro用户：600积分/月

会员权益对比
------------
功能                    免费用户    轻量版      专业版
每日生成次数            3次         20次        无限制
图片分辨率              512x512     1024x1024   2048x2048
高级滤镜                ❌          ✅          ✅
批量下载                ❌          ❌          ✅
无水印下载              ❌          ✅          ✅
优先处理队列            ❌          ❌          ✅
客服支持                ❌          ✅          ✅

===============================
错误码说明
===============================

HTTP状态码  错误类型                说明
200         OK                      请求成功
201         Created                 创建成功
400         Bad Request             请求参数错误
401         Unauthorized            未授权
403         Forbidden               禁止访问
404         Not Found               资源不存在
409         Conflict                资源冲突
422         Unprocessable Entity    参数验证失败
500         Internal Server Error   服务器内部错误

错误码设计原则
--------------
1. 错误码采用4位数字格式，便于程序处理和国际化
2. 按功能模块分段：1000-1999用户相关，2000-2999图片相关，3000-3999分类相关，9000-9999系统相关
3. 每个错误码对应唯一的错误类型，便于前端统一处理
4. 错误信息支持中英文，便于国际化扩展

详细错误码表
------------

用户相关错误码 (1000-1999)
错误码  说明                    HTTP状态码
1001    参数验证失败            400
1002    用户名格式错误          400
1003    邮箱格式错误            400
1004    密码格式错误            400
1005    用户名已存在            409
1006    邮箱已被注册            409
1007    用户不存在              404
1008    密码错误                401
1009    账户已被禁用            403
1010    Token无效或已过期       401
1011    权限不足                403
1012    头像文件格式不支持      400
1013    头像文件过大            400
1014    充值类型无效            400
1015    支付方式不支持          400

图片相关错误码 (2000-2999)
错误码  说明                    HTTP状态码
2001    图片不存在              404
2002    图片已被删除            404
2003    无权限访问该图片        403
2004    无权限删除该图片        403
2005    图片文件格式不支持      400
2006    图片文件过大            400
2007    图片生成失败            500
2008    图片转换失败            500
2009    提示词过长              400
2010    提示词为空              400
2011    图片比例无效            400
2012    图片类型无效            400

分类相关错误码 (3000-3999)
错误码  说明                    HTTP状态码
3001    分类不存在              404
3002    分类名称已存在          409
3003    分类名称格式错误        400

举报相关错误码 (4000-4999)
错误码  说明                    HTTP状态码
4001    举报内容不能为空        400
4002    重复举报                409
4003    举报内容过长            400
4004    举报频率过高            429
4005    举报不存在              404

系统相关错误码 (9000-9999)
错误码  说明                    HTTP状态码
9001    服务器内部错误          500
9002    数据库连接失败          500
9003    外部服务不可用          503
9004    请求频率过高            429
9005    服务维护中              503

常见错误示例
------------

用户注册失败 - 邮箱已存在:
{
  "status": "fail",
  "errorCode": "1006",
  "message": "该邮箱已被注册"
}

用户注册失败 - 用户名已存在:
{
  "status": "fail",
  "errorCode": "1005",
  "message": "该用户名已被使用"
}

用户注册失败 - 参数验证失败:
{
  "status": "fail",
  "errorCode": "1001",
  "message": "用户名至少3个字符，密码至少6个字符"
}

用户注册失败 - 邮箱格式错误:
{
  "status": "fail",
  "errorCode": "1003",
  "message": "邮箱格式不正确"
}

用户注册失败 - 密码格式错误:
{
  "status": "fail",
  "errorCode": "1004",
  "message": "密码必须包含字母和数字，长度6-50字符"
}

用户登录失败 - 用户不存在:
{
  "status": "fail",
  "errorCode": "1007",
  "message": "该邮箱未注册"
}

用户登录失败 - 密码错误:
{
  "status": "fail",
  "errorCode": "1008",
  "message": "密码错误"
}

用户登录失败 - 账户被禁用:
{
  "status": "fail",
  "errorCode": "1009",
  "message": "账户已被禁用，请联系客服"
}

Token验证失败:
{
  "status": "fail",
  "errorCode": "1010",
  "message": "登录已过期，请重新登录"
}

权限不足:
{
  "status": "fail",
  "errorCode": "1011",
  "message": "权限不足，无法执行此操作"
}

图片不存在:
{
  "status": "fail",
  "errorCode": "2001",
  "message": "指定的图片不存在"
}

无权限删除图片:
{
  "status": "fail",
  "errorCode": "2004",
  "message": "只能删除自己创建的图片"
}

文件上传失败:
{
  "status": "fail",
  "errorCode": "1012",
  "message": "仅支持JPG、PNG、GIF格式的图片"
}

文件过大:
{
  "status": "fail",
  "errorCode": "1013",
  "message": "文件大小不能超过5MB"
}

图片生成失败:
{
  "status": "fail",
  "errorCode": "2007",
  "message": "AI图片生成服务暂时不可用，请稍后重试"
}

请求频率过高:
{
  "status": "fail",
  "errorCode": "9004",
  "message": "请求过于频繁，请稍后再试"
}

===============================
使用示例
===============================

JavaScript/TypeScript:
----------------------

// 用户注册
const registerResponse = await fetch('http://localhost:3001/api/users/register', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    username: 'hongyu',
    email: 'hongyu@example.com',
    password: 'password123'
  })
});
const registerData = await registerResponse.json();

// 错误处理示例
if (registerData.status === 'fail') {
  switch (registerData.errorCode) {
    case '1006':
      console.log('邮箱已被注册，请使用其他邮箱');
      break;
    case '1005':
      console.log('用户名已存在，请使用其他用户名');
      break;
    case '1003':
      console.log('邮箱格式不正确');
      break;
    case '1004':
      console.log('密码格式不符合要求');
      break;
    default:
      console.log('注册失败：' + registerData.message);
  }
}

// 用户登录
const loginResponse = await fetch('http://localhost:3001/api/users/login', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    email: 'hongyu@example.com',
    password: 'password123'
  })
});
const loginData = await loginResponse.json();

// 登录错误处理示例
if (loginData.status === 'fail') {
  switch (loginData.errorCode) {
    case '1007':
      console.log('该邮箱未注册，请先注册');
      break;
    case '1008':
      console.log('密码错误，请重新输入');
      break;
    case '1009':
      console.log('账户已被禁用，请联系客服');
      break;
    default:
      console.log('登录失败：' + loginData.message);
  }
  return;
}

const token = loginData.data.token;
const user = loginData.data.user;

// 获取用户信息
console.log('用户信息：', {
  username: user.username,
  userType: user.userType,
  credits: user.credits,
  membershipExpiry: user.membershipExpiry
});

// 根据用户类型显示不同功能
if (user.userType === 'free') {
  console.log('免费用户，每日可生成3次图片');
} else if (user.userType === 'lite') {
  console.log('轻量版用户，每日可生成20次图片');
} else if (user.userType === 'pro') {
  console.log('专业版用户，无限制生成图片');
}

// 搜索图片
const searchParams = new URLSearchParams({
  query: 'cat',
  category: 'animals',
  currentPage: '1',
  pageSize: '10'
});
const imageResponse = await fetch(`http://localhost:3001/api/images?${searchParams}`, {
  headers: {
    'Authorization': `Bearer ${token}`
  }
});
const imageData = await imageResponse.json();

// 文本生成图片
const generateResponse = await fetch('http://localhost:3001/api/images/text2imggenerate', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`
  },
  body: JSON.stringify({
    prompt: '可爱的小猫咪涂色页',
    ratio: '1:1',
    isPublic: true
  })
});
const generateData = await generateResponse.json();

// 删除图片
const deleteResponse = await fetch('http://localhost:3001/api/images/cat', {
  method: 'DELETE',
  headers: {
    'Authorization': `Bearer ${token}`
  }
});
const deleteData = await deleteResponse.json();

// 举报图片
const reportResponse = await fetch('http://localhost:3001/api/images/report', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`
  },
  body: JSON.stringify({
    content: '该图片包含不当内容，不适合儿童观看',
    imageId: 'cat_123456'
  })
});
const reportData = await reportResponse.json();

// 举报错误处理示例
if (reportData.status === 'fail') {
  switch (reportData.errorCode) {
    case '2001':
      console.log('图片不存在');
      break;
    case '4001':
      console.log('举报内容不能为空');
      break;
    case '4002':
      console.log('您已经举报过该图片');
      break;
    case '4004':
      console.log('举报频率过高，请稍后再试');
      break;
    default:
      console.log('举报失败：' + reportData.message);
  }
}

cURL:
-----

# 用户注册
curl -X POST "http://localhost:3001/api/users/register" \
  -H "Content-Type: application/json" \
  -d '{
    "username": "hongyu",
    "email": "hongyu@example.com",
    "password": "password123"
  }'

# 用户登录
curl -X POST "http://localhost:3001/api/users/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "hongyu@example.com",
    "password": "password123"
  }'

# 搜索图片
curl -X GET "http://localhost:3001/api/images?query=cat&category=animals&currentPage=1&pageSize=10" \
  -H "Authorization: Bearer <token>"

# 获取分类列表
curl -X GET "http://localhost:3001/api/categories"

# 文本生成图片
curl -X POST "http://localhost:3001/api/images/text2imggenerate" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <token>" \
  -d '{
    "prompt": "可爱的小猫咪涂色页",
    "ratio": "1:1",
    "isPublic": true
  }'

# 上传头像
curl -X POST "http://localhost:3001/api/users/avatar" \
  -H "Authorization: Bearer <token>" \
  -F "file=@avatar.jpg"

# 删除图片
curl -X DELETE "http://localhost:3001/api/images/cat" \
  -H "Authorization: Bearer <token>"

# 举报图片
curl -X POST "http://localhost:3001/api/images/report" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <token>" \
  -d '{
    "content": "该图片包含不当内容，不适合儿童观看",
    "imageId": "cat_123456"
  }'

===============================
更新日志
===============================

v1.0.0 (2024-01-15)
- 完成用户管理API（注册、登录、信息修改、头像上传、充值）
- 完成图片管理API（查询、文本生成、图片转换、删除、举报）
- 完成分类管理API
- 添加JWT认证支持
- 添加文件上传功能
- 添加参数验证和错误处理
- 添加内容举报功能

===============================

文档最后更新时间: 2024-01-15
技术支持: 如有问题请提交Issue或联系开发团队
