-- 如果数据库存在，先删除数据库
DROP DATABASE IF EXISTS image_processing_db;

-- 创建数据库
CREATE DATABASE IF NOT EXISTS image_processing_db;

-- 使用数据库
USE image_processing_db;

-- 创建 categories 表（先创建被引用的表）
CREATE TABLE categories (
  category_id VARCHAR(36) PRIMARY KEY,
  display_name JSON,                            -- 多语言显示名称 { "en": "Animals", "zh": "动物" }
  description JSON,                             -- 多语言描述 { "en": "description", "zh": "描述" }
  image_id VARCHAR(36),
  hotness INT DEFAULT 0,                        -- 热度值，范围 0-1000
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 为 categories 表添加 SEO 字段
ALTER TABLE categories 
ADD COLUMN seo_title JSON COMMENT '多语言SEO标题 {"en": "SEO Title", "zh": "SEO标题"}',
ADD COLUMN seo_desc JSON COMMENT '多语言SEO描述 {"en": "SEO Description", "zh": "SEO描述"}';

-- 创建 tags 表
CREATE TABLE tags (
  tag_id VARCHAR(36) PRIMARY KEY,
  display_name JSON,                           -- 多语言显示名称 { "en": "Easy", "zh": "简单" }
  description JSON,                            -- 多语言描述 { "en": "description", "zh": "描述" }
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 创建 images 表（包含正确的外键约束）
CREATE TABLE images (
    id VARCHAR(36) PRIMARY KEY,                -- 主键
    name JSON,                                  -- 多语言名称 { "en": "name", "zh": "名称" }
    defaultUrl VARCHAR(255),                    -- 黑白图片URL
    colorUrl VARCHAR(255),                      -- image to image 时用户上传的图片URL
    coloringUrl VARCHAR(255),                   -- 黑白图片上色后的图片URL
    title JSON,                                 -- 多语言标题 { "en": "title", "zh": "标题" }
    description JSON,                           -- 多语言描述 { "en": "description", "zh": "描述" }
    type VARCHAR(50),                           -- 图片类型：'text2image/image2image/image2coloring'
    ratio VARCHAR(10),                          -- 图片比例：'1:1', '4:3', '16:9'
    isPublic BOOLEAN DEFAULT FALSE,             -- 是否公开
    isOnline BOOLEAN DEFAULT FALSE,             -- 是否上线（审核通过且可在前端展示）
    hotness INT DEFAULT 0,                      -- 热度值，范围 0-1000
    createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    prompt JSON,                                -- 多语言生成提示词 { "en": "prompt", "zh": "提示词" }
    userId VARCHAR(255),                        -- 用户ID
    categoryId VARCHAR(255),                    -- 分类ID
    size VARCHAR(50),                           -- 图片尺寸信息
    additionalInfo JSON,                        -- 额外信息
    taskId VARCHAR(255)
);

-- 为 images 表添加难度字段
ALTER TABLE images 
ADD COLUMN difficulty VARCHAR(30) DEFAULT 'children' COMMENT '难度等级：toddler、children、teen、adult';

-- 创建 image_tags 关联表（多对多关系，替代images表中的tags JSON字段）
CREATE TABLE image_tags (
  image_id VARCHAR(36),                        -- 匹配images表主键类型
  tag_id VARCHAR(36),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (image_id, tag_id),
  -- 外键约束
  CONSTRAINT fk_image_tags_image
    FOREIGN KEY (image_id) REFERENCES images(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_image_tags_tag
    FOREIGN KEY (tag_id) REFERENCES tags(tag_id)
    ON DELETE CASCADE ON UPDATE CASCADE
);

-- 创建索引以提高查询性能
CREATE INDEX idx_images_category ON images(categoryId);
CREATE INDEX idx_images_user ON images(userId);
CREATE INDEX idx_images_type ON images(type);
CREATE INDEX idx_images_public ON images(isPublic);
CREATE INDEX idx_images_created ON images(createdAt);
CREATE INDEX idx_images_hotness ON images(hotness);
CREATE INDEX idx_images_difficulty ON images(difficulty);
CREATE INDEX idx_categories_hotness ON categories(hotness);


-- 创建 users 表
CREATE TABLE users (
  user_id VARCHAR(36) PRIMARY KEY,
  username VARCHAR(50),
  email VARCHAR(100),
  password_hash VARCHAR(255),
  avatarUrl VARCHAR(255),
  useravailableScore INT,
  role VARCHAR(20),
  membershipLevel VARCHAR(20),
  refreshToken VARCHAR(255),
  createdAt DATETIME,
  updatedAt DATETIME,
  balance DECIMAL(10,2),
  membershipExpiry DATETIME,
  resetPasswordToken VARCHAR(255),
  firstlogin_time DATETIME
);

-- 创建 recharges 表
CREATE TABLE `recharges` (
  `rechargeId` varchar(36) NOT NULL, -- 主键：充值记录的唯一标识 UUID
  `userId` varchar(36) NOT NULL, -- 外键：关联用户表中的 user_id
  `orderId` varchar(50) DEFAULT NULL, -- PayPal 或其他支付渠道生成的订单号，可能为空（如系统赠送）
  `amount` decimal(10, 2) NOT NULL, -- 金额（单位：美元），系统赠送为 0
  `currency` char(3) NOT NULL DEFAULT 'USD', -- 货币代码，默认为 USD（美元）
  `status` enum('pending', 'success', 'failed', 'refund') NOT NULL, -- 状态：待支付、成功、失败、已退款
  `method` varchar(20) NOT NULL, -- 支付方式，如 'paypal'、'stripe'、'system'（系统赠送）
  `planCode` varchar(20) NOT NULL, -- 套餐代码，如 monthly_basic, yearly_pro 等
  `creditsAdded` int unsigned NOT NULL, -- 实际到账的积分数量
  `chargeType` enum('Monthly', 'Yearly', 'Credit') NOT NULL, -- 套餐类型：月付、年付、单次购买积分
  `duration` tinyint unsigned NOT NULL DEFAULT '0', -- 会籍时长（单位：月），仅 Yearly/Monthly 有效
  `monthlyCredit` int unsigned NOT NULL DEFAULT '0', -- 月度赠送积分（仅 Yearly 有效）
  `gift_month` char(7) NOT NULL DEFAULT '' COMMENT 'YYYY-MM；系统月赠幂等键', -- 标记赠送积分对应的月份，仅系统发放积分使用
  `createdAt` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 创建时间（插入时自动记录）
  `updatedAt` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- 更新时间（记录变动时自动刷新）

  -- 主键
  PRIMARY KEY (`rechargeId`),

  -- 唯一约束：防止同一用户在同一月份对同一类型的充值（例如系统月赠）重复入账
  UNIQUE KEY `uq_user_month` (`userId`, `gift_month`, `chargeType`),

  -- 唯一约束：防止同一支付订单号被重复写入
  UNIQUE KEY `orderId` (`orderId`),

  -- 普通索引：加速通过 userId 查询记录
  KEY `idx_userId` (`userId`),

  -- 普通索引：加速通过 chargeType 查询
  KEY `idx_chargeType` (`chargeType`),

  -- 外键约束：保证 userId 的合法性；若用户删除，相关充值记录也将被删除
  CONSTRAINT `fk_recharges_user` FOREIGN KEY (`userId`) REFERENCES `users` (`user_id`) 
    ON DELETE CASCADE 
    ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- 用户行为记录表
CREATE TABLE `userBehaviorLog` (
    `id` VARCHAR(36) NOT NULL COMMENT '主键ID（UUID）',
    `userId` VARCHAR(36) NOT NULL COMMENT '用户ID（UUID）',
    `behaviorType` varchar(50) NOT NULL COMMENT '行为类型：register/login/logout/change_password/reset_password/recharge/renew/upgrade/generate_image/search/download/other',
    `behaviorSubtype` varchar(50) DEFAULT NULL COMMENT '行为子类型：email/phone/social_login/user_initiated/admin_reset/text_to_image/image_to_image/lite/pro/max等',
    `behaviorDesc` varchar(255) DEFAULT NULL COMMENT '行为描述',
    `operationResult` tinyint(4) NOT NULL DEFAULT '1' COMMENT '操作结果：1成功，0失败',
    `errorMessage` text DEFAULT NULL COMMENT '错误信息（失败时记录）',
    `creditsConsumed` int(11) DEFAULT '0' COMMENT '消耗积分数量',
    `creditsAdded` int(11) DEFAULT '0' COMMENT '增加积分数量（充值时）',
    `amount` decimal(10,2) DEFAULT NULL COMMENT '金额（充值、续费、升级时）',
    `ipAddress` varchar(45) DEFAULT NULL COMMENT 'IP地址',
    `userAgent` text DEFAULT NULL COMMENT '用户代理信息',
    `requestParams` json DEFAULT NULL COMMENT '请求参数（JSON格式）',
    `responseData` json DEFAULT NULL COMMENT '响应数据（JSON格式）',
    `sessionId` varchar(128) DEFAULT NULL COMMENT '会话ID',
    `createdAt` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    `updatedAt` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    PRIMARY KEY (`id`),
    KEY `idx_userId` (`userId`),
    KEY `idx_behaviorType` (`behaviorType`),
    KEY `idx_createdAt` (`createdAt`),
    KEY `idx_userBehavior` (`userId`, `behaviorType`, `createdAt`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户行为记录表';

-- 行为类型枚举说明
-- behaviorType 可能的值：
-- 'register' - 注册账号
-- 'login' - 登录
-- 'logout' - 登出
-- 'change_password' - 修改密码
-- 'reset_password' - 找回密码
-- 'recharge' - 充值
-- 'renew' - 续费
-- 'upgrade' - 升级
-- 'generate_image' - 生成图片
-- 'search' - 搜索
-- 'download' - 下载
-- 'other' - 其他操作

-- behaviorSubtype 可能的值（根据behaviorType）：
-- 当 behaviorType = 'register' 时：'email', 'phone', 'social_login'
-- 当 behaviorType = 'change_password' 时：'user_initiated', 'admin_reset'
-- 当 behaviorType = 'reset_password' 时：'email', 'phone', 'security_question'
-- 当 behaviorType = 'generate_image' 时：'text_to_image', 'image_to_image'
-- 当 behaviorType = 'upgrade' 时：'lite', 'pro', 'max'
-- 当 behaviorType = 'search' 时：可以是具体的搜索类型
-- 当 behaviorType = 'download' 时：可以是下载的文件类型


-- 创建 image_reports 表
CREATE TABLE image_reports (
  report_id VARCHAR(36) PRIMARY KEY,
  image_id VARCHAR(36),
  user_id VARCHAR(36),
  content TEXT,
  report_type VARCHAR(50),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  -- 外键约束
  CONSTRAINT fk_image_reports_user
    FOREIGN KEY (user_id) REFERENCES users(user_id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT fk_image_reports_image
    FOREIGN KEY (image_id) REFERENCES images(id)
    ON DELETE CASCADE ON UPDATE CASCADE
);